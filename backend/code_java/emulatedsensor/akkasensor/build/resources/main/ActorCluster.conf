akka {
   actor {
      provider = cluster
      serializers {
           java = "akka.serialization.JavaSerializer"
           bytes = "akka.serialization.ByteArraySerializer"
           primitive-long = "akka.serialization.LongSerializer"
           primitive-int = "akka.serialization.IntSerializer"
           primitive-string = "akka.serialization.StringSerializer"
           primitive-bytestring = "akka.serialization.ByteStringSerializer"
           primitive-boolean = "akka.serialization.BooleanSerializer"
      }
      serialization-bindings {
            "[B" = bytes
            "java.io.Serializable" = java

            "java.lang.String" = primitive-string
            "akka.util.ByteString$ByteString1C" = primitive-bytestring
            "akka.util.ByteString$ByteString1" = primitive-bytestring
            "akka.util.ByteString$ByteStrings" = primitive-bytestring
            "java.lang.Long" = primitive-long
            "scala.Long" = primitive-long
            "java.lang.Integer" = primitive-int
            "scala.Int" = primitive-int
            "java.lang.Boolean" = primitive-boolean
            "scala.Boolean" = primitive-boolean
      }
      serialization-identifiers {
            "akka.serialization.JavaSerializer" = 1
            "akka.serialization.ByteArraySerializer" = 4

            primitive-long = 18
            primitive-int = 19
            primitive-string = 20
            primitive-bytestring = 21
            primitive-boolean = 35
      }
      deployment {
         /client_manager/zyzzyvaRouter {
            router = round-robin-group
            routees.paths = ["/user/zyzzyva_manager"]
            cluster {
               enabled = on
               allow-local-routees = on
            }
         }
         /replica_manager/zyzzyvaRouter {
            router = broadcast-group
            routees.paths = ["/user/zyzzyva_manager"]
            cluster {
               enabled = on
               allow-local-routees = on
            }
         }
          /zyzzyva_manager/replicaRouter {
            router = broadcast-group
            routees.paths = ["/user/replica_manager"]
            cluster {
               enabled = on
               allow-local-routees = on
            }
         }
          /zyzzyva_manager/clientRouter {
            router = broadcast-group
            routees.paths =  ["/user/client_manager/client0","/user/client_manager/client1","/user/client_manager/client2"]
            cluster {
               enabled = on
               allow-local-routees = on
            }
         }
          /client_manager/clientRouter {
            router =round-robin-group
            routees.paths = ["/user/client_manager/client0","/user/client_manager/client1","/user/client_manager/client2"]
            cluster {
               enabled = on
               allow-local-routees = on
            }
         }
      }
   }
   remote {
      log-remote-lifecycle-events = DEBUG

      netty.tcp {
            # The class given here must implement the akka.remote.transport.Transport
            # interface and offer a public constructor which takes two arguments:
            #  1) akka.actor.ExtendedActorSystem
            #  2) com.typesafe.config.Config
            transport-class = "akka.remote.transport.netty.NettyTransport"
            bind-hostname = "192.168.1.100"
            bind-port=0
            hostname = localhost
            # the values below this comment may be overridden by Akka.Bootstrap.Docker at runtime
            port = 0
            maximum-frame-size = 1000000b
      }
   }
   cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    split-brain-resolver {
      active-strategy = keep-majority
    }
    seed-nodes = [
         "akka.tcp://cluster-playground@gestionip:9090",
         "akka.tcp://cluster-playground@dashboard:9091"
         ]
    auto-down-unreachable-after = 60s
    failure-detector {
        heartbeat-interval = 10 s
        acceptable-heartbeat-pause = 13 s
    }
   }
}